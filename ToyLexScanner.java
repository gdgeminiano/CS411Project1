/* The following code was generated by JFlex 1.6.1 */

/*
* CS 411 Project 1 Lexical Analyzer
* Name: Gerianna Geminiano, Andrew Quach
*/
import java.io.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>search.flex</tt>
 */
class ToyLexScanner {

  /* User Stuff */
  Trie dataTrie;
  String lexerOutput;

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\12\1\14\1\72\1\72\1\13\22\0\1\20\1\57\1\71"+
    "\1\50\1\50\1\53\1\60\1\50\1\63\1\64\1\16\1\52\1\62"+
    "\1\11\1\7\1\15\1\4\11\2\1\50\1\61\1\54\1\55\1\56"+
    "\1\50\1\50\4\6\1\10\1\6\21\1\1\5\2\1\1\65\1\17"+
    "\1\66\1\50\1\3\1\0\1\25\1\21\1\31\1\33\1\24\1\37"+
    "\1\45\1\47\1\40\1\1\1\30\1\23\1\41\1\26\1\22\1\42"+
    "\1\1\1\27\1\32\1\36\1\34\1\46\1\43\1\35\1\44\1\1"+
    "\1\67\1\51\1\70\1\50\6\0\1\72\u1fa2\0\1\72\1\72\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\1\3\1\4\1\5"+
    "\1\1\1\6\1\7\1\10\1\11\15\2\2\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\1\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\2\33\1\6\1\34\1\35\1\36\2\0\1\37\1\0"+
    "\15\2\1\40\4\2\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\0\1\3\2\37\1\0\13\2\1\50"+
    "\1\2\1\51\4\2\1\35\1\0\2\2\1\52\7\2"+
    "\1\53\4\2\1\54\1\2\1\55\4\2\1\56\5\2"+
    "\1\57\3\2\1\60\1\61\1\62\1\63\3\2\1\64"+
    "\1\65\3\2\1\66\1\67\2\2\1\70\1\2\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\166"+
    "\0\166\0\u019d\0\166\0\166\0\u01d8\0\166\0\u0213\0\u024e"+
    "\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426"+
    "\0\u0461\0\u049c\0\u04d7\0\166\0\u0512\0\166\0\166\0\u054d"+
    "\0\u0588\0\u05c3\0\u05fe\0\u0639\0\166\0\166\0\166\0\166"+
    "\0\166\0\166\0\166\0\166\0\166\0\u0674\0\u06af\0\166"+
    "\0\u06ea\0\166\0\u0725\0\u0127\0\u0760\0\u079b\0\u07d6\0\u0811"+
    "\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9"+
    "\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\261\0\u0b4b\0\u0b86"+
    "\0\u0bc1\0\u0bfc\0\166\0\166\0\166\0\166\0\166\0\166"+
    "\0\166\0\u0c37\0\u079b\0\u0c72\0\166\0\u0cad\0\u0ce8\0\u0d23"+
    "\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb"+
    "\0\u0f36\0\261\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098"+
    "\0\u10d3\0\u10d3\0\u110e\0\u1149\0\261\0\u1184\0\u11bf\0\u11fa"+
    "\0\u1235\0\u1270\0\u12ab\0\u12e6\0\261\0\u1321\0\u135c\0\u1397"+
    "\0\u13d2\0\261\0\u140d\0\261\0\u1448\0\u1483\0\u14be\0\u14f9"+
    "\0\261\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\261\0\u165b"+
    "\0\u1696\0\u16d1\0\261\0\261\0\261\0\261\0\u170c\0\u1747"+
    "\0\u1782\0\261\0\261\0\u17bd\0\u17f8\0\u1833\0\261\0\261"+
    "\0\u186e\0\u18a9\0\261\0\u18e4\0\261";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\2\4\1\10\1\4"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\3\1\12"+
    "\1\17\2\4\1\20\1\4\1\21\1\22\1\4\1\23"+
    "\1\24\1\25\2\4\1\26\1\27\1\30\1\4\1\31"+
    "\1\32\2\4\1\33\1\4\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\13\7\56"+
    "\1\13\3\56\1\57\1\60\2\56\1\61\1\13\50\56"+
    "\1\62\1\56\74\0\6\4\1\0\1\4\10\0\27\4"+
    "\25\0\1\5\1\0\1\5\2\0\1\63\64\0\6\64"+
    "\1\0\1\64\10\0\27\64\25\0\1\65\1\0\1\65"+
    "\1\66\1\0\1\63\25\0\1\66\47\0\1\12\5\0"+
    "\1\12\67\0\1\67\1\70\55\0\6\4\1\0\1\4"+
    "\10\0\1\4\1\71\4\4\1\72\20\4\24\0\6\4"+
    "\1\0\1\4\10\0\2\4\1\73\11\4\1\74\12\4"+
    "\24\0\6\4\1\0\1\4\10\0\3\4\1\75\23\4"+
    "\24\0\6\4\1\0\1\4\10\0\3\4\1\76\23\4"+
    "\24\0\6\4\1\0\1\4\10\0\2\4\1\77\24\4"+
    "\24\0\6\4\1\0\1\4\10\0\15\4\1\100\11\4"+
    "\24\0\6\4\1\0\1\4\10\0\1\4\1\101\25\4"+
    "\24\0\6\4\1\0\1\4\10\0\6\4\1\102\20\4"+
    "\24\0\6\4\1\0\1\4\10\0\1\4\1\103\2\4"+
    "\1\104\22\4\24\0\6\4\1\0\1\4\10\0\5\4"+
    "\1\105\10\4\1\106\1\4\1\107\6\4\24\0\6\4"+
    "\1\0\1\4\10\0\6\4\1\110\20\4\24\0\6\4"+
    "\1\0\1\4\10\0\26\4\1\111\24\0\6\4\1\0"+
    "\1\4\10\0\1\4\1\112\25\4\74\0\1\113\76\0"+
    "\1\114\72\0\1\115\72\0\1\116\72\0\1\117\75\0"+
    "\1\120\12\0\7\56\1\0\3\56\2\0\2\56\2\0"+
    "\50\56\1\0\1\56\14\0\1\60\56\0\13\121\2\0"+
    "\55\121\3\0\1\63\1\0\1\63\3\0\1\122\13\0"+
    "\1\122\50\0\1\65\1\0\1\65\2\0\1\63\65\0"+
    "\1\123\1\0\1\123\1\0\1\123\1\0\1\123\10\0"+
    "\1\123\2\0\2\123\3\0\1\123\1\0\1\123\3\0"+
    "\1\123\33\0\13\67\1\124\1\125\56\67\16\70\1\126"+
    "\54\70\1\0\6\4\1\0\1\4\10\0\1\4\1\127"+
    "\25\4\24\0\6\4\1\0\1\4\10\0\3\4\1\130"+
    "\23\4\24\0\6\4\1\0\1\4\10\0\11\4\1\131"+
    "\15\4\24\0\6\4\1\0\1\4\10\0\15\4\1\132"+
    "\11\4\24\0\6\4\1\0\1\4\10\0\22\4\1\133"+
    "\4\4\24\0\6\4\1\0\1\4\10\0\4\4\1\134"+
    "\10\4\1\135\11\4\24\0\6\4\1\0\1\4\10\0"+
    "\4\4\1\136\22\4\24\0\6\4\1\0\1\4\10\0"+
    "\6\4\1\137\20\4\24\0\6\4\1\0\1\4\10\0"+
    "\13\4\1\140\13\4\24\0\6\4\1\0\1\4\10\0"+
    "\13\4\1\141\13\4\24\0\6\4\1\0\1\4\10\0"+
    "\6\4\1\142\20\4\24\0\6\4\1\0\1\4\10\0"+
    "\2\4\1\143\24\4\24\0\6\4\1\0\1\4\10\0"+
    "\15\4\1\144\11\4\24\0\6\4\1\0\1\4\10\0"+
    "\21\4\1\145\5\4\24\0\6\4\1\0\1\4\10\0"+
    "\17\4\1\146\7\4\24\0\6\4\1\0\1\4\10\0"+
    "\17\4\1\147\7\4\24\0\6\4\1\0\1\4\10\0"+
    "\17\4\1\150\7\4\25\0\1\151\1\0\1\151\4\0"+
    "\1\152\40\0\1\152\34\0\1\125\56\0\15\70\1\125"+
    "\1\126\54\70\1\0\6\4\1\0\1\4\10\0\2\4"+
    "\1\153\24\4\24\0\6\4\1\0\1\4\10\0\4\4"+
    "\1\154\22\4\24\0\6\4\1\0\1\4\10\0\3\4"+
    "\1\155\23\4\24\0\6\4\1\0\1\4\10\0\3\4"+
    "\1\156\23\4\24\0\6\4\1\0\1\4\10\0\4\4"+
    "\1\157\22\4\24\0\6\4\1\0\1\4\10\0\12\4"+
    "\1\160\14\4\24\0\6\4\1\0\1\4\10\0\13\4"+
    "\1\161\13\4\24\0\6\4\1\0\1\4\10\0\11\4"+
    "\1\162\15\4\24\0\6\4\1\0\1\4\10\0\17\4"+
    "\1\163\7\4\24\0\6\4\1\0\1\4\10\0\1\164"+
    "\26\4\24\0\6\4\1\0\1\4\10\0\3\4\1\165"+
    "\23\4\24\0\6\4\1\0\1\4\10\0\11\4\1\141"+
    "\15\4\24\0\6\4\1\0\1\4\10\0\3\4\1\166"+
    "\23\4\24\0\6\4\1\0\1\4\10\0\2\4\1\167"+
    "\24\4\24\0\6\4\1\0\1\4\10\0\5\4\1\170"+
    "\21\4\24\0\6\4\1\0\1\4\10\0\2\4\1\171"+
    "\24\4\24\0\6\4\1\0\1\4\10\0\12\4\1\172"+
    "\14\4\25\0\1\151\1\0\1\151\67\0\6\4\1\0"+
    "\1\4\10\0\3\4\1\173\23\4\24\0\6\4\1\0"+
    "\1\4\10\0\7\4\1\174\17\4\24\0\6\4\1\0"+
    "\1\4\10\0\5\4\1\175\21\4\24\0\6\4\1\0"+
    "\1\4\10\0\6\4\1\176\20\4\24\0\6\4\1\0"+
    "\1\4\10\0\2\4\1\177\24\4\24\0\6\4\1\0"+
    "\1\4\10\0\6\4\1\200\20\4\24\0\6\4\1\0"+
    "\1\4\10\0\11\4\1\201\15\4\24\0\6\4\1\0"+
    "\1\4\10\0\5\4\1\202\21\4\24\0\6\4\1\0"+
    "\1\4\10\0\2\4\1\203\24\4\24\0\6\4\1\0"+
    "\1\4\10\0\6\4\1\204\20\4\24\0\6\4\1\0"+
    "\1\4\10\0\3\4\1\205\23\4\24\0\6\4\1\0"+
    "\1\4\10\0\15\4\1\206\11\4\24\0\6\4\1\0"+
    "\1\4\10\0\3\4\1\207\23\4\24\0\6\4\1\0"+
    "\1\4\10\0\4\4\1\210\22\4\24\0\6\4\1\0"+
    "\1\4\10\0\12\4\1\211\14\4\24\0\6\4\1\0"+
    "\1\4\10\0\6\4\1\212\20\4\24\0\6\4\1\0"+
    "\1\4\10\0\5\4\1\213\21\4\24\0\6\4\1\0"+
    "\1\4\10\0\5\4\1\214\21\4\24\0\6\4\1\0"+
    "\1\4\10\0\24\4\1\215\2\4\24\0\6\4\1\0"+
    "\1\4\10\0\3\4\1\216\23\4\24\0\6\4\1\0"+
    "\1\4\10\0\16\4\1\217\10\4\24\0\6\4\1\0"+
    "\1\4\10\0\20\4\1\220\6\4\24\0\6\4\1\0"+
    "\1\4\10\0\2\4\1\221\24\4\24\0\6\4\1\0"+
    "\1\4\10\0\5\4\1\222\21\4\24\0\6\4\1\0"+
    "\1\4\10\0\11\4\1\223\15\4\24\0\6\4\1\0"+
    "\1\4\10\0\4\4\1\224\22\4\24\0\6\4\1\0"+
    "\1\4\10\0\4\4\1\225\22\4\24\0\6\4\1\0"+
    "\1\4\10\0\3\4\1\226\23\4\24\0\6\4\1\0"+
    "\1\4\10\0\5\4\1\227\21\4\24\0\6\4\1\0"+
    "\1\4\10\0\23\4\1\230\3\4\24\0\6\4\1\0"+
    "\1\4\10\0\10\4\1\231\16\4\24\0\6\4\1\0"+
    "\1\4\10\0\5\4\1\232\21\4\24\0\6\4\1\0"+
    "\1\4\10\0\3\4\1\233\23\4\24\0\6\4\1\0"+
    "\1\4\10\0\15\4\1\234\11\4\24\0\6\4\1\0"+
    "\1\4\10\0\11\4\1\235\15\4\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6431];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\2\11\1\1\2\11\1\1\1\11"+
    "\15\1\1\11\1\1\2\11\5\1\11\11\2\1\1\11"+
    "\1\1\1\11\2\1\2\0\1\1\1\0\22\1\7\11"+
    "\1\0\2\1\1\11\1\0\23\1\1\0\63\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

  // Print trie table
  public void printTrie()
    {
      dataTrie.print("OUTPUT.txt");
    }

  // Print the tokens as their associated integers
    public void printLexerOutput()
    {
        writeTo(lexerOutput);
    }

  // Overwrite file OUTPUT.txt
  public void createFile(){
    try (BufferedWriter bw = new BufferedWriter(new FileWriter("OUTPUT.txt",false))) {
    bw.write("");
    bw.close();
    } catch (IOException e) {
        e.printStackTrace();
        }
  }

  //Append to file OUTPUT.txt
  public void writeTo(String token){
    try (BufferedWriter bw = new BufferedWriter(new FileWriter("OUTPUT.txt",true))) {
			bw.write(token);
			bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ToyLexScanner(java.io.Reader in) {
      dataTrie = new Trie(500);
      lexerOutput = "";
    createFile();

    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* do nothing */
            }
          case 58: break;
          case 2:
            { writeTo("id ");
                    dataTrie.insert(yytext());
                    lexerOutput += " " + Sym.ID;
            }
          case 59: break;
          case 3:
            { writeTo("intconstant ");
                    lexerOutput += " " + Sym.INT_CONST;
            }
          case 60: break;
          case 4:
            { writeTo("period ");
                    lexerOutput += " " + Sym.PERIOD;
            }
          case 61: break;
          case 5:
            { writeTo("minus ");
                    lexerOutput += " " + Sym.MINUS;
            }
          case 62: break;
          case 6:
            { System.out.print(yytext());
            }
          case 63: break;
          case 7:
            { writeTo("\r\n");
            }
          case 64: break;
          case 8:
            { writeTo("div ");
                    lexerOutput += " " + Sym.DIVIDE;
            }
          case 65: break;
          case 9:
            { writeTo("mult ");
                    lexerOutput += " " + Sym.MULTI;
            }
          case 66: break;
          case 10:
            { throw new RuntimeException("Illegal character \""+yytext()+"\"");
            }
          case 67: break;
          case 11:
            { writeTo("plus ");
                    lexerOutput += " " + Sym.PLUS;
            }
          case 68: break;
          case 12:
            { writeTo("mod ");
                    lexerOutput += " " + Sym.MOD;
            }
          case 69: break;
          case 13:
            { writeTo("less ");
                    lexerOutput += " " + Sym.LESS;
            }
          case 70: break;
          case 14:
            { writeTo("eq ");
                    lexerOutput += " " + Sym.ASSIGN;
            }
          case 71: break;
          case 15:
            { writeTo("greater ");
                    lexerOutput += " " + Sym.GTR;
            }
          case 72: break;
          case 16:
            { writeTo("not ");
                    lexerOutput += " " + Sym.NOT;
            }
          case 73: break;
          case 17:
            { writeTo("semicolon ");
                    lexerOutput += " " + Sym.SEMI;
            }
          case 74: break;
          case 18:
            { writeTo("comma ");
                    lexerOutput += " " + Sym.COMMA;
            }
          case 75: break;
          case 19:
            { writeTo("leftparen ");
                    lexerOutput += " " + Sym.LEFT_PAREN;
            }
          case 76: break;
          case 20:
            { writeTo("rightparen ");
                    lexerOutput += " " + Sym.RIGHT_PAREN;
            }
          case 77: break;
          case 21:
            { writeTo("leftbrac ");
                    lexerOutput += " " + Sym.LEFT_BRKT;
            }
          case 78: break;
          case 22:
            { writeTo("rightbrac ");
                    lexerOutput += " " + Sym.RT_BRKT;
            }
          case 79: break;
          case 23:
            { writeTo("leftbrace ");
                    lexerOutput += " " + Sym.L_BRACE;
            }
          case 80: break;
          case 24:
            { writeTo("rightbrace ");
                    lexerOutput += " " + Sym.R_BRACE;
            }
          case 81: break;
          case 25:
            { yybegin(STRING);
            }
          case 82: break;
          case 26:
            {
            }
          case 83: break;
          case 27:
            { throw new RuntimeException("Unterminated string at end of line");
            }
          case 84: break;
          case 28:
            { yybegin(YYINITIAL); writeTo("string ");
                    lexerOutput += " " + Sym.STRING_CONST;
            }
          case 85: break;
          case 29:
            { writeTo("doubleconstant ");
                    lexerOutput += " " + Sym.DOUBLE_CONST;
            }
          case 86: break;
          case 30:
            { throw new RuntimeException("Illegal identifier\""+yytext()+"\"");
            }
          case 87: break;
          case 31:
            { writeTo("\n");
            }
          case 88: break;
          case 32:
            { writeTo("if ");
                   dataTrie.insert(yytext());
                    lexerOutput += " " + Sym.IF;
            }
          case 89: break;
          case 33:
            { writeTo("oror ");
                    lexerOutput += " " + Sym.OR;
            }
          case 90: break;
          case 34:
            { writeTo("lesseq ");
                    lexerOutput += " " + Sym.LESS_EQ;
            }
          case 91: break;
          case 35:
            { writeTo("eqeq ");
                    lexerOutput += " " + Sym.EQ;
            }
          case 92: break;
          case 36:
            { writeTo("greatereq ");
                    lexerOutput += " " + Sym.GTR_EQ;
            }
          case 93: break;
          case 37:
            { writeTo("noteq ");
                    lexerOutput += " " + Sym.NOT_EQ;
            }
          case 94: break;
          case 38:
            { writeTo("andand ");
                    lexerOutput += " " + Sym.AND;
            }
          case 95: break;
          case 39:
            { throw new RuntimeException("Illegal new line \""+yytext()+"\" in string.");
            }
          case 96: break;
          case 40:
            { writeTo("for ");
                   dataTrie.insert(yytext());
                    lexerOutput += " " + Sym.FOR;
            }
          case 97: break;
          case 41:
            { writeTo("int ");
                    dataTrie.insert(yytext());
                     lexerOutput += " " + Sym.INT;
            }
          case 98: break;
          case 42:
            { writeTo("else ");
                   dataTrie.insert(yytext());
                    lexerOutput += " " + Sym.ELSE;
            }
          case 99: break;
          case 43:
            { writeTo("booleanconstant ");
                    dataTrie.insert(yytext());
                    lexerOutput += " " + Sym.BOOL_CONST;
            }
          case 100: break;
          case 44:
            { writeTo("void ");
                    dataTrie.insert(yytext());
                    lexerOutput += " " + Sym.VOID;
            }
          case 101: break;
          case 45:
            { writeTo("break ");
                   dataTrie.insert(yytext());
                   lexerOutput += " " + Sym.BREAK;
            }
          case 102: break;
          case 46:
            { writeTo("class ");
                   dataTrie.insert(yytext());
                    lexerOutput += " " + Sym.CLASS;
            }
          case 103: break;
          case 47:
            { writeTo("while ");
                    dataTrie.insert(yytext());
                    lexerOutput += " " + Sym.WHILE;
            }
          case 104: break;
          case 48:
            { writeTo("readln ");
                    dataTrie.insert(yytext());
                    lexerOutput += " " + Sym.READLN;
            }
          case 105: break;
          case 49:
            { writeTo("return ");
                    dataTrie.insert(yytext());
                    lexerOutput += " " + Sym.RETURN;
            }
          case 106: break;
          case 50:
            { writeTo("string ");
                    dataTrie.insert(yytext());
                    lexerOutput += " " + Sym.STRING;
            }
          case 107: break;
          case 51:
            { writeTo("double ");
                   dataTrie.insert(yytext());
                    lexerOutput += " " + Sym.DOUBLE;
            }
          case 108: break;
          case 52:
            { writeTo("boolean ");
                   dataTrie.insert(yytext());
                    lexerOutput += " " + Sym.BOOL;
            }
          case 109: break;
          case 53:
            { writeTo("extends ");
                   dataTrie.insert(yytext());
                    lexerOutput += " " + Sym.EXTENDS;
            }
          case 110: break;
          case 54:
            { writeTo("println ");
                    dataTrie.insert(yytext());
                    lexerOutput += " " + Sym.PRINTLN;
            }
          case 111: break;
          case 55:
            { writeTo("newarray ");
                    dataTrie.insert(yytext());
                     lexerOutput += " " + Sym.NEWARRAY;
            }
          case 112: break;
          case 56:
            { writeTo("interface ");
                    dataTrie.insert(yytext());
                     lexerOutput += " " + Sym.INTERFACE;
            }
          case 113: break;
          case 57:
            { writeTo("implements ");
                    dataTrie.insert(yytext());
                    lexerOutput += " " + Sym.IMPLEMENTS;
            }
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java ToyLexScanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        ToyLexScanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new ToyLexScanner(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
          scanner.printLexerOutput();
          scanner.printTrie();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
