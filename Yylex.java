/* The following code was generated by JFlex 1.6.1 */

/*
* Search through source flagging any
* occurrances of pattern (a|b)*abb
* found.
*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>search.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\7\1\62\1\62\1\10\22\0\1\0\1\47\1\0"+
    "\2\0\1\43\1\50\1\0\1\54\1\55\1\12\1\42\1\53\1\6"+
    "\1\5\1\11\1\2\11\1\1\0\1\52\1\44\1\45\1\46\2\0"+
    "\4\4\1\4\1\4\21\0\1\3\2\0\1\56\1\0\1\57\1\0"+
    "\1\0\1\0\1\17\1\13\1\23\1\25\1\16\1\31\1\37\1\41"+
    "\1\32\1\0\1\22\1\15\1\33\1\20\1\14\1\34\1\0\1\21"+
    "\1\24\1\30\1\26\1\40\1\35\1\27\1\36\1\0\1\60\1\51"+
    "\1\61\7\0\1\62\u1fa2\0\1\62\1\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\15\1\1\10\1\11\1\12\1\13\1\14\1\15\2\1"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\0\1\26\16\0\1\27\4\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\2\2\26\15\0\1\36\1\0"+
    "\1\37\7\0\1\40\7\0\1\41\4\0\1\42\1\0"+
    "\1\43\4\0\1\44\5\0\1\45\3\0\1\46\1\47"+
    "\1\50\1\51\3\0\1\52\1\53\3\0\1\54\1\55"+
    "\2\0\1\56\1\0\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\63\0\63\0\63\0\314"+
    "\0\63\0\377\0\u0132\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231"+
    "\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\63\0\63"+
    "\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\u04c8\0\u04fb"+
    "\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693"+
    "\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\63\0\u07f8"+
    "\0\u082b\0\u085e\0\u0891\0\63\0\63\0\63\0\63\0\63"+
    "\0\63\0\u04c8\0\63\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990"+
    "\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28"+
    "\0\u0b5b\0\63\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d"+
    "\0\u0cc0\0\u0cf3\0\u0d26\0\63\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\63\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57"+
    "\0\63\0\u0f8a\0\63\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\63"+
    "\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\63\0\u1188\0\u11bb"+
    "\0\u11ee\0\63\0\63\0\63\0\63\0\u1221\0\u1254\0\u1287"+
    "\0\63\0\63\0\u12ba\0\u12ed\0\u1320\0\63\0\63\0\u1353"+
    "\0\u1386\0\63\0\u13b9\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\2\1\5\1\6\1\2\1\7"+
    "\1\10\1\11\1\12\2\2\1\13\1\2\1\14\1\15"+
    "\1\2\1\16\1\17\1\20\2\2\1\21\1\22\1\23"+
    "\1\2\1\24\1\25\2\2\1\26\1\2\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\7\64\0"+
    "\2\3\63\0\1\47\23\0\1\47\44\0\1\50\1\51"+
    "\64\0\1\52\4\0\1\53\56\0\1\54\11\0\1\55"+
    "\51\0\1\56\62\0\1\57\61\0\1\60\75\0\1\61"+
    "\46\0\1\62\67\0\1\63\55\0\1\64\2\0\1\65"+
    "\63\0\1\66\10\0\1\67\1\0\1\70\50\0\1\71"+
    "\102\0\1\72\35\0\1\73\113\0\1\74\62\0\1\75"+
    "\62\0\1\76\62\0\1\77\65\0\1\100\63\0\1\101"+
    "\12\0\2\102\1\0\1\102\6\0\1\102\2\0\2\102"+
    "\3\0\1\102\1\0\1\102\3\0\1\102\31\0\7\50"+
    "\1\103\1\104\52\50\12\105\1\106\50\105\14\0\1\107"+
    "\64\0\1\110\70\0\1\111\66\0\1\112\67\0\1\113"+
    "\44\0\1\114\10\0\1\115\51\0\1\116\64\0\1\117"+
    "\67\0\1\120\62\0\1\121\55\0\1\122\56\0\1\123"+
    "\75\0\1\124\66\0\1\125\60\0\1\126\62\0\1\127"+
    "\62\0\1\130\37\0\1\103\53\0\12\105\1\131\50\105"+
    "\11\0\1\103\1\106\65\0\1\132\64\0\1\133\61\0"+
    "\1\134\62\0\1\135\63\0\1\136\70\0\1\137\63\0"+
    "\1\140\60\0\1\141\70\0\1\142\43\0\1\143\65\0"+
    "\1\144\70\0\1\121\54\0\1\145\61\0\1\146\65\0"+
    "\1\147\57\0\1\150\72\0\1\151\35\0\11\105\1\103"+
    "\1\131\50\105\16\0\1\152\66\0\1\153\60\0\1\154"+
    "\63\0\1\155\56\0\1\156\66\0\1\157\65\0\1\160"+
    "\56\0\1\161\57\0\1\162\66\0\1\163\57\0\1\164"+
    "\74\0\1\165\50\0\1\166\63\0\1\167\70\0\1\170"+
    "\56\0\1\171\61\0\1\172\62\0\1\173\101\0\1\174"+
    "\41\0\1\175\75\0\1\176\64\0\1\177\44\0\1\200"+
    "\65\0\1\201\66\0\1\202\55\0\1\203\62\0\1\204"+
    "\61\0\1\205\64\0\1\206\100\0\1\207\47\0\1\210"+
    "\57\0\1\211\60\0\1\212\74\0\1\213\56\0\1\214"+
    "\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\3\11\1\1\1\11\15\1\2\11"+
    "\6\1\10\11\1\0\1\1\16\0\1\11\4\0\6\11"+
    "\1\1\1\11\1\1\15\0\1\11\1\0\1\1\7\0"+
    "\1\11\7\0\1\11\4\0\1\11\1\0\1\11\4\0"+
    "\1\11\5\0\1\11\3\0\4\11\3\0\2\11\3\0"+
    "\2\11\2\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* do nothing */
            }
          case 48: break;
          case 2: 
            { System.out.print("intconstant ");
            }
          case 49: break;
          case 3: 
            { System.out.print("period ");
            }
          case 50: break;
          case 4: 
            { System.out.print("minus ");
            }
          case 51: break;
          case 5: 
            { System.out.print(yytext());
            }
          case 52: break;
          case 6: 
            { System.out.print("div ");
            }
          case 53: break;
          case 7: 
            { System.out.print("mult ");
            }
          case 54: break;
          case 8: 
            { System.out.print("plus ");
            }
          case 55: break;
          case 9: 
            { System.out.print("mod ");
            }
          case 56: break;
          case 10: 
            { System.out.print("less ");
            }
          case 57: break;
          case 11: 
            { System.out.print("eq ");
            }
          case 58: break;
          case 12: 
            { System.out.print("greater ");
            }
          case 59: break;
          case 13: 
            { System.out.print("not ");
            }
          case 60: break;
          case 14: 
            { System.out.print("semicolon ");
            }
          case 61: break;
          case 15: 
            { System.out.print("comma ");
            }
          case 62: break;
          case 16: 
            { System.out.print("leftparen ");
            }
          case 63: break;
          case 17: 
            { System.out.print("rightparen ");
            }
          case 64: break;
          case 18: 
            { System.out.print("leftbrac ");
            }
          case 65: break;
          case 19: 
            { System.out.print("rightbrac ");
            }
          case 66: break;
          case 20: 
            { System.out.print("leftbrace ");
            }
          case 67: break;
          case 21: 
            { System.out.print("rightbrace ");
            }
          case 68: break;
          case 22: 
            { System.out.print("\n");
            }
          case 69: break;
          case 23: 
            { System.out.print("if ");
            }
          case 70: break;
          case 24: 
            { System.out.print("lesseq ");
            }
          case 71: break;
          case 25: 
            { System.out.print("eqeq ");
            }
          case 72: break;
          case 26: 
            { System.out.print("greatereq ");
            }
          case 73: break;
          case 27: 
            { System.out.print("noteq ");
            }
          case 74: break;
          case 28: 
            { System.out.print("andand ");
            }
          case 75: break;
          case 29: 
            { System.out.print("oror ");
            }
          case 76: break;
          case 30: 
            { System.out.print("for ");
            }
          case 77: break;
          case 31: 
            { System.out.print("int ");
            }
          case 78: break;
          case 32: 
            { System.out.print("else ");
            }
          case 79: break;
          case 33: 
            { System.out.print("booleanconstant");
            }
          case 80: break;
          case 34: 
            { System.out.print("void ");
            }
          case 81: break;
          case 35: 
            { System.out.print("break ");
            }
          case 82: break;
          case 36: 
            { System.out.print("class ");
            }
          case 83: break;
          case 37: 
            { System.out.print("while ");
            }
          case 84: break;
          case 38: 
            { System.out.print("readln ");
            }
          case 85: break;
          case 39: 
            { System.out.print("return ");
            }
          case 86: break;
          case 40: 
            { System.out.print("string ");
            }
          case 87: break;
          case 41: 
            { System.out.print("double ");
            }
          case 88: break;
          case 42: 
            { System.out.print("boolean ");
            }
          case 89: break;
          case 43: 
            { System.out.print("extends ");
            }
          case 90: break;
          case 44: 
            { System.out.print("println ");
            }
          case 91: break;
          case 45: 
            { System.out.print("newarray ");
            }
          case 92: break;
          case 46: 
            { System.out.print("interface ");
            }
          case 93: break;
          case 47: 
            { System.out.print("implements ");
            }
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Yylex(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
