/* The following code was generated by JFlex 1.6.1 */


import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>search.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\14\1\67\1\67\1\13\22\0\1\12\1\54\1\17"+
    "\2\0\1\50\1\55\1\0\1\61\1\62\1\16\1\47\1\60\1\11"+
    "\1\7\1\15\1\4\11\2\1\0\1\57\1\51\1\52\1\53\2\0"+
    "\4\6\1\10\1\6\21\1\1\5\2\1\1\63\1\70\1\64\1\0"+
    "\1\3\1\0\1\24\1\20\1\30\1\32\1\23\1\36\1\44\1\46"+
    "\1\37\1\1\1\27\1\22\1\40\1\25\1\21\1\41\1\1\1\26"+
    "\1\31\1\35\1\33\1\45\1\42\1\34\1\43\1\1\1\65\1\56"+
    "\1\66\7\0\1\67\u1fa2\0\1\67\1\67\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\15\2\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\1\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\31\1\35\2\0\1\7\1\0\15\2\1\36\4\2"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\32\2\45"+
    "\1\0\1\3\1\7\1\0\13\2\1\46\1\2\1\47"+
    "\4\2\1\35\1\0\2\2\1\50\7\2\1\51\4\2"+
    "\1\52\1\2\1\53\4\2\1\54\5\2\1\55\3\2"+
    "\1\56\1\57\1\60\1\61\3\2\1\62\1\63\3\2"+
    "\1\64\1\65\2\2\1\66\1\2\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\162\0\162"+
    "\0\u0156\0\162\0\162\0\u018f\0\162\0\162\0\u01c8\0\u0201"+
    "\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9"+
    "\0\u0402\0\u043b\0\u0474\0\162\0\162\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\162\0\162\0\162\0\162\0\162"+
    "\0\162\0\162\0\162\0\u0603\0\u063c\0\162\0\162\0\u0675"+
    "\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d"+
    "\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05"+
    "\0\u0a3e\0\u0a77\0\253\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\162"+
    "\0\162\0\162\0\162\0\162\0\162\0\162\0\u0603\0\162"+
    "\0\u0b94\0\u0720\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea"+
    "\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\253"+
    "\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1008"+
    "\0\u1041\0\u107a\0\253\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197"+
    "\0\u11d0\0\u1209\0\253\0\u1242\0\u127b\0\u12b4\0\u12ed\0\253"+
    "\0\u1326\0\253\0\u135f\0\u1398\0\u13d1\0\u140a\0\253\0\u1443"+
    "\0\u147c\0\u14b5\0\u14ee\0\u1527\0\253\0\u1560\0\u1599\0\u15d2"+
    "\0\253\0\253\0\253\0\253\0\u160b\0\u1644\0\u167d\0\253"+
    "\0\253\0\u16b6\0\u16ef\0\u1728\0\253\0\253\0\u1761\0\u179a"+
    "\0\253\0\u17d3\0\253";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\3\1\6\2\4\1\7\1\4"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\4\1\20\1\4\1\21\1\22\1\4\1\23\1\24"+
    "\1\25\2\4\1\26\1\27\1\30\1\4\1\31\1\32"+
    "\2\4\1\33\1\4\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\12\1\3\13\54\1\55\1\56"+
    "\2\54\1\57\50\54\1\60\72\0\6\4\1\0\1\4"+
    "\7\0\27\4\24\0\1\5\1\0\1\5\2\0\1\61"+
    "\63\0\1\62\1\0\1\62\1\63\1\0\1\61\24\0"+
    "\1\63\46\0\1\11\73\0\1\64\1\65\53\0\6\4"+
    "\1\0\1\4\7\0\1\4\1\66\4\4\1\67\20\4"+
    "\23\0\6\4\1\0\1\4\7\0\2\4\1\70\11\4"+
    "\1\71\12\4\23\0\6\4\1\0\1\4\7\0\3\4"+
    "\1\72\23\4\23\0\6\4\1\0\1\4\7\0\3\4"+
    "\1\73\23\4\23\0\6\4\1\0\1\4\7\0\2\4"+
    "\1\74\24\4\23\0\6\4\1\0\1\4\7\0\15\4"+
    "\1\75\11\4\23\0\6\4\1\0\1\4\7\0\1\4"+
    "\1\76\25\4\23\0\6\4\1\0\1\4\7\0\6\4"+
    "\1\77\20\4\23\0\6\4\1\0\1\4\7\0\1\4"+
    "\1\100\2\4\1\101\22\4\23\0\6\4\1\0\1\4"+
    "\7\0\5\4\1\102\10\4\1\103\1\4\1\104\6\4"+
    "\23\0\6\4\1\0\1\4\7\0\6\4\1\105\20\4"+
    "\23\0\6\4\1\0\1\4\7\0\26\4\1\106\23\0"+
    "\6\4\1\0\1\4\7\0\1\4\1\107\25\4\74\0"+
    "\1\110\70\0\1\111\70\0\1\112\70\0\1\113\73\0"+
    "\1\114\71\0\1\115\12\0\13\54\2\0\2\54\1\0"+
    "\51\54\14\0\1\116\54\0\13\117\2\0\2\117\1\120"+
    "\47\117\1\54\1\117\2\0\1\61\1\0\1\61\3\0"+
    "\1\121\12\0\1\121\47\0\1\62\1\0\1\62\2\0"+
    "\1\61\63\0\1\122\1\0\1\122\1\0\1\122\1\0"+
    "\1\122\7\0\1\122\2\0\2\122\3\0\1\122\1\0"+
    "\1\122\3\0\1\122\32\0\13\64\1\123\1\13\54\64"+
    "\16\65\1\124\52\65\1\0\6\4\1\0\1\4\7\0"+
    "\1\4\1\125\25\4\23\0\6\4\1\0\1\4\7\0"+
    "\3\4\1\126\23\4\23\0\6\4\1\0\1\4\7\0"+
    "\11\4\1\127\15\4\23\0\6\4\1\0\1\4\7\0"+
    "\15\4\1\130\11\4\23\0\6\4\1\0\1\4\7\0"+
    "\22\4\1\131\4\4\23\0\6\4\1\0\1\4\7\0"+
    "\4\4\1\132\10\4\1\133\11\4\23\0\6\4\1\0"+
    "\1\4\7\0\4\4\1\134\22\4\23\0\6\4\1\0"+
    "\1\4\7\0\6\4\1\135\20\4\23\0\6\4\1\0"+
    "\1\4\7\0\13\4\1\136\13\4\23\0\6\4\1\0"+
    "\1\4\7\0\13\4\1\137\13\4\23\0\6\4\1\0"+
    "\1\4\7\0\6\4\1\140\20\4\23\0\6\4\1\0"+
    "\1\4\7\0\2\4\1\141\24\4\23\0\6\4\1\0"+
    "\1\4\7\0\15\4\1\142\11\4\23\0\6\4\1\0"+
    "\1\4\7\0\21\4\1\143\5\4\23\0\6\4\1\0"+
    "\1\4\7\0\17\4\1\144\7\4\23\0\6\4\1\0"+
    "\1\4\7\0\17\4\1\145\7\4\23\0\6\4\1\0"+
    "\1\4\7\0\17\4\1\146\7\4\24\0\1\147\1\0"+
    "\1\147\4\0\1\150\35\0\1\150\35\0\1\13\54\0"+
    "\15\65\1\13\1\124\52\65\1\0\6\4\1\0\1\4"+
    "\7\0\2\4\1\151\24\4\23\0\6\4\1\0\1\4"+
    "\7\0\4\4\1\152\22\4\23\0\6\4\1\0\1\4"+
    "\7\0\3\4\1\153\23\4\23\0\6\4\1\0\1\4"+
    "\7\0\3\4\1\154\23\4\23\0\6\4\1\0\1\4"+
    "\7\0\4\4\1\155\22\4\23\0\6\4\1\0\1\4"+
    "\7\0\12\4\1\156\14\4\23\0\6\4\1\0\1\4"+
    "\7\0\13\4\1\157\13\4\23\0\6\4\1\0\1\4"+
    "\7\0\11\4\1\160\15\4\23\0\6\4\1\0\1\4"+
    "\7\0\17\4\1\161\7\4\23\0\6\4\1\0\1\4"+
    "\7\0\1\162\26\4\23\0\6\4\1\0\1\4\7\0"+
    "\3\4\1\163\23\4\23\0\6\4\1\0\1\4\7\0"+
    "\11\4\1\137\15\4\23\0\6\4\1\0\1\4\7\0"+
    "\3\4\1\164\23\4\23\0\6\4\1\0\1\4\7\0"+
    "\2\4\1\165\24\4\23\0\6\4\1\0\1\4\7\0"+
    "\5\4\1\166\21\4\23\0\6\4\1\0\1\4\7\0"+
    "\2\4\1\167\24\4\23\0\6\4\1\0\1\4\7\0"+
    "\12\4\1\170\14\4\24\0\1\147\1\0\1\147\65\0"+
    "\6\4\1\0\1\4\7\0\3\4\1\171\23\4\23\0"+
    "\6\4\1\0\1\4\7\0\7\4\1\172\17\4\23\0"+
    "\6\4\1\0\1\4\7\0\5\4\1\173\21\4\23\0"+
    "\6\4\1\0\1\4\7\0\6\4\1\174\20\4\23\0"+
    "\6\4\1\0\1\4\7\0\2\4\1\175\24\4\23\0"+
    "\6\4\1\0\1\4\7\0\6\4\1\176\20\4\23\0"+
    "\6\4\1\0\1\4\7\0\11\4\1\177\15\4\23\0"+
    "\6\4\1\0\1\4\7\0\5\4\1\200\21\4\23\0"+
    "\6\4\1\0\1\4\7\0\2\4\1\201\24\4\23\0"+
    "\6\4\1\0\1\4\7\0\6\4\1\202\20\4\23\0"+
    "\6\4\1\0\1\4\7\0\3\4\1\203\23\4\23\0"+
    "\6\4\1\0\1\4\7\0\15\4\1\204\11\4\23\0"+
    "\6\4\1\0\1\4\7\0\3\4\1\205\23\4\23\0"+
    "\6\4\1\0\1\4\7\0\4\4\1\206\22\4\23\0"+
    "\6\4\1\0\1\4\7\0\12\4\1\207\14\4\23\0"+
    "\6\4\1\0\1\4\7\0\6\4\1\210\20\4\23\0"+
    "\6\4\1\0\1\4\7\0\5\4\1\211\21\4\23\0"+
    "\6\4\1\0\1\4\7\0\5\4\1\212\21\4\23\0"+
    "\6\4\1\0\1\4\7\0\24\4\1\213\2\4\23\0"+
    "\6\4\1\0\1\4\7\0\3\4\1\214\23\4\23\0"+
    "\6\4\1\0\1\4\7\0\16\4\1\215\10\4\23\0"+
    "\6\4\1\0\1\4\7\0\20\4\1\216\6\4\23\0"+
    "\6\4\1\0\1\4\7\0\2\4\1\217\24\4\23\0"+
    "\6\4\1\0\1\4\7\0\5\4\1\220\21\4\23\0"+
    "\6\4\1\0\1\4\7\0\11\4\1\221\15\4\23\0"+
    "\6\4\1\0\1\4\7\0\4\4\1\222\22\4\23\0"+
    "\6\4\1\0\1\4\7\0\4\4\1\223\22\4\23\0"+
    "\6\4\1\0\1\4\7\0\3\4\1\224\23\4\23\0"+
    "\6\4\1\0\1\4\7\0\5\4\1\225\21\4\23\0"+
    "\6\4\1\0\1\4\7\0\23\4\1\226\3\4\23\0"+
    "\6\4\1\0\1\4\7\0\10\4\1\227\16\4\23\0"+
    "\6\4\1\0\1\4\7\0\5\4\1\230\21\4\23\0"+
    "\6\4\1\0\1\4\7\0\3\4\1\231\23\4\23\0"+
    "\6\4\1\0\1\4\7\0\15\4\1\232\11\4\23\0"+
    "\6\4\1\0\1\4\7\0\11\4\1\233\15\4\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6156];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\2\11\1\1\2\11\1\1\2\11"+
    "\15\1\2\11\6\1\10\11\2\1\2\11\2\1\2\0"+
    "\1\1\1\0\22\1\7\11\1\1\1\11\1\0\2\1"+
    "\1\0\23\1\1\0\63\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  public void writeTo(String token){
    try (BufferedWriter bw = new BufferedWriter(new FileWriter("OUTPUT.txt",true))) {
			bw.write(token);
			bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* do nothing */
            }
          case 56: break;
          case 2: 
            { writeTo("id ");
            }
          case 57: break;
          case 3: 
            { writeTo("intconstant ");
            }
          case 58: break;
          case 4: 
            { writeTo("period ");
            }
          case 59: break;
          case 5: 
            { writeTo("minus ");
            }
          case 60: break;
          case 6: 
            { System.out.print(yytext());
            }
          case 61: break;
          case 7: 
            { writeTo("\n");
            }
          case 62: break;
          case 8: 
            { writeTo("div ");
            }
          case 63: break;
          case 9: 
            { writeTo("mult ");
            }
          case 64: break;
          case 10: 
            { yybegin(STRING);
            }
          case 65: break;
          case 11: 
            { writeTo("plus ");
            }
          case 66: break;
          case 12: 
            { writeTo("mod ");
            }
          case 67: break;
          case 13: 
            { writeTo("less ");
            }
          case 68: break;
          case 14: 
            { writeTo("eq ");
            }
          case 69: break;
          case 15: 
            { writeTo("greater ");
            }
          case 70: break;
          case 16: 
            { writeTo("not ");
            }
          case 71: break;
          case 17: 
            { writeTo("semicolon ");
            }
          case 72: break;
          case 18: 
            { writeTo("comma ");
            }
          case 73: break;
          case 19: 
            { writeTo("leftparen ");
            }
          case 74: break;
          case 20: 
            { writeTo("rightparen ");
            }
          case 75: break;
          case 21: 
            { writeTo("leftbrac ");
            }
          case 76: break;
          case 22: 
            { writeTo("rightbrac ");
            }
          case 77: break;
          case 23: 
            { writeTo("leftbrace ");
            }
          case 78: break;
          case 24: 
            { writeTo("rightbrace ");
            }
          case 79: break;
          case 25: 
            { 
            }
          case 80: break;
          case 26: 
            { throw new RuntimeException("Unterminated string at end of line");
            }
          case 81: break;
          case 27: 
            { throw new RuntimeException("Can't have '\n'");
            }
          case 82: break;
          case 28: 
            { yybegin(YYINITIAL); writeTo("string ");
            }
          case 83: break;
          case 29: 
            { writeTo("doubleconstant ");
            }
          case 84: break;
          case 30: 
            { writeTo("if ");
            }
          case 85: break;
          case 31: 
            { writeTo("lesseq ");
            }
          case 86: break;
          case 32: 
            { writeTo("eqeq ");
            }
          case 87: break;
          case 33: 
            { writeTo("greatereq ");
            }
          case 88: break;
          case 34: 
            { writeTo("noteq ");
            }
          case 89: break;
          case 35: 
            { writeTo("andand ");
            }
          case 90: break;
          case 36: 
            { writeTo("oror ");
            }
          case 91: break;
          case 37: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          case 92: break;
          case 38: 
            { writeTo("for ");
            }
          case 93: break;
          case 39: 
            { writeTo("int ");
            }
          case 94: break;
          case 40: 
            { writeTo("else ");
            }
          case 95: break;
          case 41: 
            { writeTo("booleanconstant ");
            }
          case 96: break;
          case 42: 
            { writeTo("void ");
            }
          case 97: break;
          case 43: 
            { writeTo("break ");
            }
          case 98: break;
          case 44: 
            { writeTo("class ");
            }
          case 99: break;
          case 45: 
            { writeTo("while ");
            }
          case 100: break;
          case 46: 
            { writeTo("readln ");
            }
          case 101: break;
          case 47: 
            { writeTo("return ");
            }
          case 102: break;
          case 48: 
            { writeTo("string ");
            }
          case 103: break;
          case 49: 
            { writeTo("double ");
            }
          case 104: break;
          case 50: 
            { writeTo("boolean ");
            }
          case 105: break;
          case 51: 
            { writeTo("extends ");
            }
          case 106: break;
          case 52: 
            { writeTo("println ");
            }
          case 107: break;
          case 53: 
            { writeTo("newarray ");
            }
          case 108: break;
          case 54: 
            { writeTo("interface ");
            }
          case 109: break;
          case 55: 
            { writeTo("implements ");
            }
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Yylex(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
